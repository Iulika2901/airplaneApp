
create table zboruri (
    nrz int primary key,
    de_la varchar(50),
    la varchar(50),
    distanta int,
    plecare date,
    sosire date
);

create table eronave (
    idav int primary key,
    numeav varchar(50),
    gama_croaziera int
);

create table angajati (
    idan int primary key,
    numean varchar(50),
    functie varchar(50),
    salariu decimal(10, 2)
);

 create table certificare (
    idan int,
    idav int,
    primary key (idan, idav),
    foreign key (idan) references angajati(idan),
    foreign key (idav) references aeronave(idav)
);


alter table certificare
add constraint idavv foreign key (idav)
references aeronave;

alter table angajati
add constraint idan foreign key (idan)
references certificare;

alter table zboruri add zi date;
	

alter table aeronave
add constraint chk_numeav check (
    numeav like 'boeing%' or
    numeav like 'airbus%' or
    numeav like 'atr%'
);

alter table zboruri
add constraint chk_distanta check (
    (sosire - plecare) * 24 <= 1 or distanta > 800
);


select * from zboruri
where distanta between 700 and 1500
order by plecare asc, la desc;

select * from angajati
where functie like '%director%'
order by functie, numean;

select idav
from aeronave
where aeronave.numeav like 'airbus%';

select c1.idan as idan1, c2.idan as idan2   
from certificare c1
join certificare c2 on c1.idav = c2.idav and c1.idan < c2.idan;

select min(salariu)
from angajati
where functie = 'pilot' and idan in (
    select idan from certificare where idav in (
        select idav from aeronave where numeav like 'boeing%'
    )
);

select * 
from zboruri
where distanta <= all (
    select gama_croaziera
    from aeronave
    where idav in (+
        select idav
        from certificare
        where idan = 1
    )
);


select idan, count(idav) as num_certificari
from certificare
group by idan;


select functie, min(salariu) as min_salariu, avg(salariu) as avg_salariu, max(salariu) as max_salariu
from angajati
group by functie;

insert into angajati (idan, numean, functie, salariu) values (1, 'george iulian', 'pilot', 8); 
insert into aeronave (idav, numeav, gama_croaziera) values
    (1, 'boeing 737-800', 5420);
insert into aeronave (idav, numeav, gama_croaziera) values
    (2, 'boeing 737-700', 6000);
insert into aeronave (idav, numeav, gama_croaziera) values
    (3, 'boeing 737-300', 4600);
insert into certificare (idan, idav) values (101, 1);
insert into certificare (idan, idav) values (101, 2);
insert into certificare (idan, idav) values (101, 3);


delete from angajati
where functie = 'pilot' and idan not in (
    select idan from certificare
);

update angajati
set salariu = salariu * 1.01
where idan in (
    select idan from certificare
    group by idan
    having count(idav) > 3
);




create table exceptii (  
    idan int,
    numean varchar(50),
    functie varchar(50),
    salariu decimal(10, 2),
    idav int,
    natura_exceptie varchar(50)
);

create procedure proc1 as 
begin
    insert into exceptii (idan, numean, functie, salariu, idav, natura_exceptie)
    select a.idan, a.numean, a.functie, a.salariu, c.idav, 'salariul cel mai mic'
    from angajati a
    join certificare c on a.idan = c.idan
    where a.salariu = (
        select min(a2.salariu)
        from angajati a2
        join certificare c2 on a2.idan = c2.idan
        where c2.idav = c.idav and a2.functie = 'pilot'
    );
    insert into exceptii (idan, numean, functie, salariu, idav, natura_exceptie)
    select a.idan, a.numean, a.functie, a.salariu, c.idav, 'salariul cel mai mare'
    from angajati a
    join certificare c on a.idan = c.idan
    where a.salariu = (
        select max(a2.salariu)
        from angajati a2
        join certificare c2 on a2.idan = c2.idan
        where c2.idav = c.idav and a2.functie = 'pilot'
    );
end proc1;



create trigger tr1 before insert or update on angajati for each row
begin
    if inserting then
        update angajati set salariu = salariu + 50 where idan = :new.idan;
    elsif deleting then
        update angajati set salariu = salariu - 50 where idan = :old.idan;
    end if;
end tr1;



create or replace trigger trig_adauga_piloti_aeronave
instead of insert on PilotiAeronave
for each row
begin
    if not exists (
        select 1 
        from Aeronave 
        where idav = :new.idav
    ) then
        insert into Aeronave (idav, numeav, gamă_croazieră)
        values (:new.idav, :new.numeav, :new.gamă_croazieră);
    end if;
   insert into Certificare (idan, idav)
    values (:new.idan, :new.idav);
end;


